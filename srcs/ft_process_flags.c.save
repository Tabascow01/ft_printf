/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_process_flags.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mchemakh <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2017/02/14 01:12:04 by mchemakh          #+#    #+#             */
/*   Updated: 2017/02/25 02:14:23 by mchemakh         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_printf.h"

void	ft_process_flags(t_flags *list)
{
	//printf("precision[%d]\nzero[%c]\nhash[%c]\n",list->precision,list->zero,list->hash);
	if (list->digit != 0)
		if (list->digit[0] == '0' && list->precision == 0)
			list->zero = '0';
	if (list->sign > 0)
	{
		printf("\nprocess_sign[%d]\ndigit[%s]\nleft[%d]\nspace[%d]\n",list->sign,list->digit,list->left,list->space);
		ft_signflag(list);
		if (list->digit == 0 && list->left > 0)
			list->index += list->sign + 1;
		else if (list->digit > 0 && list->left == 0)
			list->index += list->sign;
		else if (list->digit > 0 && list->left > 0)
			list->index += list->sign + 1;
		else if (list->digit == 0 && list->left == 0)
			list->index += list->sign;
		else if (list->digit > 0 && list->space == 0)
			list->index += list->sign;
		else if (list->digit == 0 && list->space > 0)
			list->index += list->sign + list->space;
		else if (list->digit > 0 && list->space > 0)
			list->index += list->sign + list->space;
		else if (list->digit == 0 && list->space == 0)
			list->index += list->sign;
		else
			list->index += 0;
	}
	if (list->hash == '#' && ft_atoi(list->args) != 0 && (list->zero == 0 || list->left > 0))
	{
		//printf("process[#]\n");
		ft_hashflag(list);
		list->index += 1;
	}
	else if (list->hash == '#' && list->precision > 0)
		list->index += 1;
	if (list->left > 0)
	{
		if ((int)ft_strlen(list->digit) > 0)
		{
			//printf("process_ldigit[%s]\nspace[%d]\nsign[%d]\nzero[%c]\n",list->digit,list->space,list->sign,list->zero);
			ft_ldigitflag(list);
			if (list->sign > 2 && list->zero == '0' && list->space == 0)
			{
				//printf("left1\n");
				list->index += (int)ft_strlen(list->digit) - list->sign + 3;
			}
			else if (list->space > 0 && list->sign == 0)
			{
				//printf("left2\n");
				list->index += (int)ft_strlen(list->digit) + 2;
			}
			else if (list->sign == 2 && list->zero == '0')
			{
				//printf("left3\n");
				list->index += (int)ft_strlen(list->digit) - list->sign + 2;
			}
			else if (list->sign == 1 && list->zero == 0)
			{
				//printf("left4\n");
				list->index += (int)ft_strlen(list->digit) - list->sign + 2;
			}
			else if (list->precision > 0 && list->sign > 0)
			{
				//printf("left5\n");
				list->index += (int)ft_strlen(list->digit);
			}
			else if (list->sign > 1 && list->space == 0 && list->zero == 0)
				list->index += (int)ft_strlen(list->digit);
			else
			{
				//printf("left6\n");
				list->index += (int)ft_strlen(list->digit) + 1;
			}
		}
		else if (list->space > 0)
		{
			//printf("process[_<- ]\n");
			ft_lspaceflag(list);
			list->index += 1;
		}
	}
	else if (list->zero == '0' && list->precision == 0)
	{
		//printf("process[0]\n");
		ft_zeroflag(list);
		if (list->sign > 1 && list->digit > 0)
		{
			list->index += (int)ft_strlen(list->digit) - list->sign + 1;
		}
		else if (list->sign > 0 && list->digit > 0 && list->zero == '0')
			list->index += (int)ft_strlen(list->digit) - list->sign + 2;
		else if (list->hash == '#')
		{
			list->index += (int)ft_strlen(list->digit) + 1;
			ft_zhashflag(list);
		}
		else if (list->space > 0)
			list->index += (int)ft_strlen(list->digit) + list->space;
		else
			list->index += (int)ft_strlen(list->digit);
	}
	else
	{
		if ((int)ft_strlen(list->digit) > 0)
		{
			//printf("digit[%s]\nprecision[%d]\n",list->digit,list->precision);
			if (list->conv == 'c' && list->precision > 0)
			{
				list->index += (int)ft_strlen(list->digit);
				return ;
			}
			else
				ft_digitflag(list);
			if (list->space > 0 && list->precision == 0)
				list->index += (int)ft_strlen(list->digit) + 1;
			else if (list->precision > 0 && list->space > 0 && list->conv != 'c')
				list->index += (int)ft_strlen(list->digit) + list->space;
			else if (list->precision > 0 && (int)ft_strlen(list->digit) < 2 && list->conv != 'c')
				list->index += 1;
			else if (list->precision > 0 && list->hash && list->conv != 'c')
				list->index += (int)ft_strlen(list->digit);
			else
				list->index += (int)ft_strlen(list->digit);
		}
		else if (list->space > 0)
		{
			//printf("process[ ]\n");
			if (list->space > 1)
				list->index += list->space;
			else
				list->index += 1;
			if (list->args[0] == '-' || list->sign > 0)
				return ;
			if (list->percent == 0 && list->args[0] != '\0')
				ft_spaceflag(list);
		}
		else
			list->index += 1;
	}
}
